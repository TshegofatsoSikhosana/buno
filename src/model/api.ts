/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/1/accounts": {
    /**
     * # Create account
     * @description This request creates an Account for the specified currency.  Please note that the balances for the Account will be displayed based on the <code>asset</code> value, which is the currency the Account is based on.
     *
     * Permissions required: <code>Perm_W_Addresses</code>
     */
    post: operations["createAccount"];
  };
  "/api/1/accounts/{id}/name": {
    /**
     * # Update Account Name
     * @description Update the name of an account with a given ID.
     *
     * Permissions required: <code>Perm_W_Addresses</code>
     */
    put: operations["updateAccountName"];
  };
  "/api/1/accounts/{id}/pending": {
    /**
     * # List pending transactions
     * @description Return a list of all transactions that have not completed for the Account.
     *
     * Pending transactions are not numbered, and may be reordered, deleted or updated at any time.
     *
     * Permissions required: <code>Perm_R_Transactions</code>
     */
    get: operations["listPendingTransactions"];
  };
  "/api/1/accounts/{id}/transactions": {
    /**
     * # List transactions
     * @description Return a list of transaction entries from an account.
     *
     * Transaction entry rows are numbered sequentially starting from 1, where 1 is
     * the oldest entry. The range of rows to return are specified with the
     * <code>min_row</code> (inclusive) and <code>max_row</code> (exclusive)
     * parameters. At most 1000 rows can be requested per call.
     *
     * If <code>min_row</code> or <code>max_row</code> is non-positive, the range
     * wraps around the most recent row. For example, to fetch the 100 most recent
     * rows, use <code>min_row=-100</code> and <code>max_row=0</code>.
     *
     * Permissions required: <code>Perm_R_Transactions</code>
     */
    get: operations["ListTransactions"];
  };
  "/api/1/address/validate": {
    /**
     * # Validate
     * @description Validate receive addresses, to which a customer wishes to make cryptocurrency sends, are verified under covering
     * regulatory requirements for the customer such as travel rules.
     *
     * Permissions required: <code>Perm_W_Send</code>
     */
    post: operations["validate"];
  };
  "/api/1/balance": {
    /**
     * # List account balances
     * @description The list of all Accounts and their respective balances for the requesting user.
     *
     * Permissions required: <code>Perm_R_Balance</code>
     */
    get: operations["getBalances"];
  };
  "/api/1/beneficiaries": {
    /**
     * # List beneficiaries
     * @description Returns a list of bank beneficiaries.
     *
     * Permissions required: <code>Perm_R_Beneficiaries</code>
     */
    get: operations["listBeneficiariesResponse"];
  };
  "/api/1/fee_info": {
    /**
     * # Get fee information
     * @description Returns the fees and 30 day trading volume (as of midnight) for a given currency pair.  For complete details, please see <a href="en/countries">Fees & Features</a>.
     *
     * Permissions required: <code>Perm_R_Orders</code>
     */
    get: operations["getFeeInfo"];
  };
  "/api/1/funding_address": {
    /**
     * # Get receive address
     * @description Returns the default receive address associated with your account and the
     * amount received via the address. Users can specify an optional address parameter to return information for a non-default receive address.
     * In the response, <code>total_received</code> is the total confirmed amount received excluding unconfirmed transactions.
     * <code>total_unconfirmed</code> is the total sum of unconfirmed receive transactions.
     *
     * Permissions required: <code>Perm_R_Addresses</code>
     */
    get: operations["getFundingAddress"];
    /**
     * # Create receive address
     * @description Allocates a new receive address to your account. There is a rate limit of 1
     * address per hour, but bursts of up to 10 addresses are allowed. Only 1
     * Ethereum receive address can be created.
     *
     * Permissions required: <code>Perm_W_Addresses</code>
     */
    post: operations["createFundingAddress"];
  };
  "/api/1/listorders": {
    /**
     * # List orders
     * @description Returns a list of the most recently placed Orders.
     * Users can specify an optional <code>state=PENDING</code> parameter to restrict the results to only open Orders.
     * Users can also specify the market by using the optional currency pair parameter.
     *
     * Permissions required: <code>Perm_R_Orders</code>
     */
    get: operations["ListOrders"];
  };
  "/api/1/listtrades": {
    /**
     * # List trades
     * @description Returns a list of the recent Trades for a given currency pair for this user, sorted by oldest first.
     * If <code>before</code> is specified, then Trades are returned sorted by most-recent first.
     *
     * <code>type</code> in the response indicates the type of Order that was placed to participate in the trade.
     * Possible types: <code>BID</code>, <code>ASK</code>.
     *
     * If <code>is_buy</code> in the response is true, then the Order which completed the trade (market taker) was a Bid Order.
     *
     * Results of this query may lag behind the latest data.
     *
     * Permissions required: <code>Perm_R_Orders</code>
     */
    get: operations["ListUserTrades"];
  };
  "/api/1/marketorder": {
    /**
     * # Post Market Order
     * @description A Market Order executes immediately, and either buys as much of the asset that can be bought for a set amount of fiat currency, or sells a set amount of the asset for as much as possible.
     *
     * <b>Warning!</b> Orders cannot be reversed once they have executed.
     * Please ensure your program has been thoroughly tested before submitting Orders.
     *
     * If no <code>base_account_id</code> or <code>counter_account_id</code> are specified, the default base currency or counter currency account will be used.
     * Users can find their account IDs by calling the <a href="#operation/getBalances">Balances</a> request.
     *
     * Permissions required: <code>Perm_W_Orders</code>
     */
    post: operations["PostMarketOrder"];
  };
  "/api/1/orderbook": {
    /**
     * # Get full order book
     * @description This request returns all `bids` and `asks`, for the currency pair specified, in the Order Book.
     *
     * `asks` are sorted by price ascending and `bids` are sorted by price descending.
     *
     * Multiple orders at the same price are not aggregated.
     *
     * <b>WARNING:</b> This may return a large amount of data.
     * Users are recommended to use the <a href="#operation/getOrderBookTop">top 100 bids and asks</a>
     * or the <a href="#tag/Streaming-API">Streaming API</a>.
     */
    get: operations["GetOrderBookFull"];
  };
  "/api/1/orderbook_top": {
    /**
     * # Get top order book
     * @description This request returns the best 100 `bids` and `asks`, for the currency pair specified, in the Order Book.
     *
     * `asks` are sorted by price ascending and `bids` are sorted by price descending.
     *
     * Multiple orders at the same price are aggregated.
     */
    get: operations["GetOrderBook"];
  };
  "/api/1/orders/{id}": {
    /**
     * # Get order
     * @description Get an Order's details by its ID.
     *
     * Permissions required: <code>Perm_R_Orders</code>
     */
    get: operations["GetOrder"];
  };
  "/api/1/postorder": {
    /**
     * # Post Limit Order
     * @description <b>Warning!</b> Orders cannot be reversed once they have executed.
     * Please ensure your program has been thoroughly tested before submitting Orders.
     *
     * If no <code>base_account_id</code> or <code>counter_account_id</code> are specified,
     * your default base currency or counter currency account will be used.
     * You can find your Account IDs by calling the <a href="#operation/getBalances">Balances</a> API.
     *
     * Permissions required: <code>Perm_W_Orders</code>
     */
    post: operations["PostLimitOrder"];
  };
  "/api/1/send": {
    /**
     * # Send
     * @description Send assets from an Account. Please note that the asset type sent must match the receive address of the same cryptocurrency of the same type - Bitcoin to Bitcoin, Ethereum to Ethereum, etc.
     *
     * Sends can be made to cryptocurrency receive addresses.
     *
     * <b>Note:</b> This is currently unavailable to users who are verified in countries with money travel rules.
     *
     * Permissions required: <code>Perm_W_Send</code>
     */
    post: operations["send"];
  };
  "/api/1/send_fee": {
    /**
     * # Estimate send fees
     * @description Calculate fees involved with a crypto send request.
     *
     * Send address can be to a cryptocurrency receive address, or the email address of another Luno platform user.
     *
     * Permissions required: <code>MP_None</code>
     */
    get: operations["SendFee"];
  };
  "/api/1/stoporder": {
    /**
     * # Cancel Order
     * @description Request to cancel an Order.
     *
     * <b>Note!</b>: Once an Order has been completed, it can not be reversed.
     * The return value from this request will indicate if the Stop request was successful or not.
     *
     * Permissions required: <code>Perm_W_Orders</code>
     */
    post: operations["StopOrder"];
  };
  "/api/1/ticker": {
    /**
     * # Get ticker for currency pair
     * @description Returns the latest ticker indicators for the specified currency pair.
     *
     * Please see the <a href="#tag/currency ">Currency list</a> for the complete list of supported currency pairs.
     */
    get: operations["GetTicker"];
  };
  "/api/1/tickers": {
    /**
     * # List tickers for all currency pairs
     * @description Returns the latest ticker indicators from all active Luno exchanges.
     *
     * Please see the <a href="#tag/currency ">Currency list</a> for the complete list of supported currency pairs.
     */
    get: operations["GetTickers"];
  };
  "/api/1/trades": {
    /**
     * # List recent trades
     * @description Returns a list of recent trades for the specified currency pair. At most
     * 100 trades are returned per call and never trades older than 24h. The
     * trades are sorted from newest to oldest.
     *
     * Please see the <a href="#tag/currency ">Currency list</a> for the complete list of supported currency pairs.
     */
    get: operations["ListTrades"];
  };
  "/api/1/withdrawals": {
    /**
     * # List withdrawal requests
     * @description Returns a list of withdrawal requests.
     *
     * Permissions required: <code>Perm_R_Withdrawals</code>
     */
    get: operations["ListWithdrawals"];
    /**
     * # Request a withdrawal
     * @description Creates a new withdrawal request to the specified beneficiary.
     *
     * Permissions required: <code>Perm_W_Withdrawals</code>
     */
    post: operations["CreateWithdrawal"];
  };
  "/api/1/withdrawals/{id}": {
    /**
     * # Get withdrawal request
     * @description Returns the status of a particular withdrawal request.
     *
     * Permissions required: <code>Perm_R_Withdrawals</code>
     */
    get: operations["GetWithdrawal"];
    /**
     * # Cancel withdrawal request
     * @description Cancels a withdrawal request.
     * This can only be done if the request is still in state <code>PENDING</code>.
     *
     * Permissions required: <code>Perm_W_Withdrawals</code>
     */
    delete: operations["CancelWithdrawal"];
  };
  "/api/exchange/1/candles": {
    /**
     * # Get candles
     * @description Get candlestick market data from the specified time until now, from the oldest to the most recent.
     *
     * Permissions required: <code>MP_None</code>
     */
    get: operations["GetCandles"];
  };
  "/api/exchange/1/markets": {
    /**
     * # Get markets info
     * @description List all supported markets parameter information like price scale, min and
     * max order volumes and market ID.
     */
    get: operations["Markets"];
  };
  "/api/exchange/1/move": {
    /**
     * Move
     * @description Get a specific move funds instruction by either <code>id</code> or
     * <code>client_move_id</code>. If both are provided an API error will be
     * returned.
     *
     * Permissions required: <code>MP_None</code>
     */
    get: operations["GetMove"];
    /**
     * Move
     * @description Move funds between two of your transactional accounts with the same currency
     * The funds may not be moved by the time the request returns. The GET method
     * can be used to poll for the move's status.
     *
     * Note: moves will show as transactions, but not as transfers.
     *
     * Permissions required: <code>MP_None_Write</code>
     */
    post: operations["Move"];
  };
  "/api/exchange/1/move/list_moves": {
    /**
     * ListMoves
     * @description Returns a list of the most recent moves ordered from newest to oldest.
     * This endpoint will list up to 100 most recent moves by default.
     *
     * Permissions required: <code>MP_None</code>
     */
    get: operations["ListMoves"];
  };
  "/api/exchange/1/transfers": {
    /**
     * List transfers
     * @description Returns a list of the most recent confirmed transfers ordered from newest to
     * oldest.
     * This includes bank transfers, card payments, or on-chain transactions that
     * have been reflected on your account available balance.
     *
     * Note that the Transfer `amount` is always a positive value and you should
     * use the `inbound` flag to determine the direction of the transfer.
     *
     * If you need to paginate the results you can set the `before` parameter to
     * the last returned transfer `created_at` field value and repeat the request
     * until you have all the transfers you need.
     * This endpoint will list up to 100 transfers at a time by default.
     *
     * Permissions required: <Code>Perm_R_Transfers</Code>
     */
    get: operations["ListTransfers"];
  };
  "/api/exchange/2/listorders": {
    /**
     * List Orders v2
     * @description Returns a list of the most recently placed orders ordered from newest to
     * oldest. This endpoint will list up to 100 most recent open orders by
     * default.
     *
     * Permissions required: <Code>Perm_R_Orders</Code>
     */
    get: operations["ListOrdersV2"];
  };
  "/api/exchange/2/orders/{id}": {
    /**
     * Get Order v2
     * @description Get the details for an order.
     *
     * Permissions required: <code>Perm_R_Orders</code>
     */
    get: operations["GetOrderV2"];
  };
  "/api/exchange/3/order": {
    /**
     * Get Order v3
     * @description Get the details for an order by order reference or client order ID.
     * Exactly one of the two parameters must be provided, otherwise an error is returned.
     * Permissions required: <code>Perm_R_Orders</code>
     */
    get: operations["GetOrderV3"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Balance represents the current state of the account. */
    AccountBalance: {
      /**
       * Format: int64
       * @description ID of the account.
       * @example "237592692"
       */
      account_id?: string;
      /**
       * @description Currency code for the asset held in this account.
       * @example "XBT"
       */
      asset?: string;
      /**
       * Format: amount
       * @description The amount available to send or trade.
       */
      balance?: string;
      /**
       * @description The name set by the user upon creating the account.
       * @example "Trading account"
       */
      name?: string;
      /**
       * Format: amount
       * @description Amount locked by Luno and cannot be sent or traded. This could be due to
       * open orders.
       */
      reserved?: string;
      /**
       * Format: amount
       * @description Amount that is awaiting some sort of verification to be credited to this
       * account. This could be an on-chain transaction that Luno is waiting for
       * further block verifications to happen.
       */
      unconfirmed?: string;
    };
    AccountInfo: {
      currency?: string;
      /** Format: int64 */
      id?: string;
      name?: string;
      pending?: components["schemas"]["Transaction"][];
      transactions?: components["schemas"]["Transaction"][];
    };
    AddressMeta: {
      label?: string;
      value?: string;
    };
    BalanceList: {
      balance?: components["schemas"]["AccountBalance"][];
    };
    /**
     * BigDecimal is an arbitrary precision decimal number.
     * @description A BigDecimal consists of an integer mantissa (d.i) and an exponent (d.scale).
     * The value represented by d is:
     *
     * d.i * 10^(-d.scale)
     *
     * A zero BigDecimal struct is valid and represents 0 (i = 0, scale = 0).
     */
    BigDecimal: Record<string, never>;
    /** @description CancelWithdrawalResponse response */
    CancelWithdrawalResponse: {
      /**
       * Format: amount
       * @description Amount to withdraw
       */
      amount?: string;
      /**
       * Format: timestamp
       * @description Unix time the withdrawal was initiated, in milliseconds
       */
      created_at?: string;
      /**
       * @description Withdrawal currency.
       * @example EUR
       */
      currency?: string;
      /** @description External ID has the value that was passed in when the Withdrawal request was posted. */
      external_id?: string;
      /**
       * Format: amount
       * @description Withdrawal fee
       */
      fee?: string;
      id?: string;
      /**
       * @description Status
       * @enum {string}
       */
      status?: "PENDING" | "PROCESSING" | "COMPLETED" | "CANCELLED" | "WAITING" | "CANCELLING" | "UNKNOWN";
      /**
       * @description Type distinguishes between different withdrawal methods where more than one is supported
       * for the given currency.
       * @example SGD_WIRE
       */
      type?: string;
    };
    Candle: {
      /**
       * Format: amount
       * @description Closing price
       */
      close?: string;
      /**
       * Format: amount
       * @description High price
       */
      high?: string;
      /**
       * Format: amount
       * @description Low price
       */
      low?: string;
      /**
       * Format: amount
       * @description Opening price
       */
      open?: string;
      /**
       * Format: timestamp
       * @description Unix timestamp in milliseconds
       */
      timestamp?: string;
      /**
       * Format: amount
       * @description Volume traded
       */
      volume?: string;
    };
    /** @description CreateWithdrawalResponse response */
    CreateWithdrawalResponse: {
      /**
       * Format: amount
       * @description Amount to withdraw
       */
      amount?: string;
      /**
       * Format: timestamp
       * @description Unix time the withdrawal was initiated, in milliseconds
       */
      created_at?: string;
      /**
       * @description Withdrawal currency.
       * @example EUR
       */
      currency?: string;
      /** @description External ID has the value that was passed in when the Withdrawal request was posted. */
      external_id?: string;
      /**
       * Format: amount
       * @description Withdrawal fee
       */
      fee?: string;
      id?: string;
      /**
       * @description Status
       * @enum {string}
       */
      status?: "PENDING" | "PROCESSING" | "COMPLETED" | "CANCELLED" | "WAITING" | "CANCELLING" | "UNKNOWN";
      /**
       * @description Type distinguishes between different withdrawal methods where more than one is supported
       * for the given currency.
       * @example SGD_WIRE
       */
      type?: string;
    };
    /**
     * @description CryptoDetails contains a transaction's cryptocurrency address
     * and transaction id
     */
    CryptoDetails: {
      address?: string;
      txid?: string;
    };
    /**
     * DecimalE8 defines a generic fixed-point integer with 8 decimal places.
     * @description Deprecated. Use BigDecimal for new code.
     */
    DecimalE8: Record<string, never>;
    /** DetailFields contains structured, machine-readable transaction details. */
    DetailFields: {
      crypto_details?: components["schemas"]["CryptoDetails"];
      trade_details?: components["schemas"]["TradeDetails"];
    };
    FeeInfo: {
      maker_fee?: string;
      taker_fee?: string;
      thirty_day_volume?: string;
    };
    FundsMove: {
      /**
       * Format: amount
       * @description The assets quantity to move from the debit account to credit account. This is always a positive value.
       */
      amount?: string;
      /**
       * @description User defined unique ID
       * @example move-1642.2008_10_31
       */
      client_move_id?: string;
      /**
       * Format: timestamp
       * @description Unix time the move was initiated, in milliseconds
       */
      created_at?: string;
      /**
       * @description The account to credit the funds to.
       * @example 8557520073699984185
       */
      credit_account_id?: string;
      /**
       * @description The account to debit the funds from.
       * @example 2225762606892986213
       */
      debit_account_id?: string;
      /**
       * @description Unique ID, defined by Luno
       * @example 6213702911573325445
       */
      id?: string;
      /**
       * @description Current status of the move.
       *
       * Status meaning:<br>
       * <code>CREATED</code> The move is awaiting execution.<br>
       * <code>MOVING</code> The funds have been reserved and the move is being executed.<br>
       * <code>SUCCESSFUL</code> The move has completed successfully and should be reflected in both accounts available
       * balance.<br>
       * <code>FAILED</code> The move has failed. There could be many reasons for this but the most likely is that the
       * debit account doesn't have enough available funds to move.<br>
       * @example MOVING
       * @enum {string}
       */
      status?: "CREATED" | "MOVING" | "SUCCESSFUL" | "FAILED";
      /**
       * Format: timestamp
       * @description Unix time the move was last updated, in milliseconds
       */
      updated_at?: string;
    };
    /** @description GetCandlesResponse response */
    GetCandlesResponse: {
      candles?: components["schemas"]["Candle"][];
      /**
       * Format: int64
       * @description Duration in seconds
       */
      duration?: number;
      pair?: string;
    };
    /** @description GetMoveResponse response for GET /1/move */
    GetMoveResponse: {
      /**
       * Format: amount
       * @description The assets quantity to move from the debit account to credit account. This is always a positive value.
       */
      amount?: string;
      /**
       * @description User defined unique ID
       * @example move-1642.2008_10_31
       */
      client_move_id?: string;
      /**
       * Format: timestamp
       * @description Unix time the move was initiated, in milliseconds
       */
      created_at?: string;
      /**
       * @description The account to credit the funds to.
       * @example 8557520073699984185
       */
      credit_account_id?: string;
      /**
       * @description The account to debit the funds from.
       * @example 2225762606892986213
       */
      debit_account_id?: string;
      /**
       * @description Unique ID, defined by Luno
       * @example 6213702911573325445
       */
      id?: string;
      /**
       * @description Current status of the move.
       *
       * Status meaning:<br>
       * <code>CREATED</code> The move is awaiting execution.<br>
       * <code>MOVING</code> The funds have been reserved and the move is being executed.<br>
       * <code>SUCCESSFUL</code> The move has completed successfully and should be reflected in both accounts available
       * balance.<br>
       * <code>FAILED</code> The move has failed. There could be many reasons for this but the most likely is that the
       * debit account doesn't have enough available funds to move.<br>
       * @example MOVING
       * @enum {string}
       */
      status?: "CREATED" | "MOVING" | "SUCCESSFUL" | "FAILED";
      /**
       * Format: timestamp
       * @description Unix time the move was last updated, in milliseconds
       */
      updated_at?: string;
    };
    /** @description GetOrder2Response response */
    GetOrder2Response: {
      /**
       * Format: amount
       * @description Amount of base filled, this value is always positive.
       *
       * Use this field and `side` to determine credit or debit of funds.
       */
      base?: string;
      /**
       * Format: int64
       * @description The base account ID used to place the order
       */
      base_account_id?: number;
      /** @description Client Order ID has the value that was passed in when the Order was posted. */
      client_order_id?: string;
      /**
       * Format: timestamp
       * @description Time of order completion (Unix milliseconds)
       *
       * This value is set at the time of this order leaving the order book,
       * either immediately upon posting or later on due to a trade or cancellation.
       * Whilst the order is still pending/live it will be 0.
       */
      completed_timestamp?: string;
      /**
       * Format: amount
       * @description Amount of counter filled, this value is always positive.
       *
       * Use this field and `side` to determine credit or debit of funds.
       */
      counter?: string;
      /**
       * Format: int64
       * @description The counter account ID used to place the order
       */
      counter_account_id?: number;
      /**
       * Format: timestamp
       * @description Time of order creation (Unix milliseconds)
       */
      creation_timestamp?: string;
      /**
       * Format: timestamp
       * @description Time of order expiration (Unix milliseconds)
       *
       * This value is set at the time of processing a request from you to cancel the order, otherwise it will be 0.
       */
      expiration_timestamp?: string;
      /**
       * Format: amount
       * @description Base amount of fees to be charged
       */
      fee_base?: string;
      /**
       * Format: amount
       * @description Counter amount of fees to be charged
       */
      fee_counter?: string;
      /**
       * Format: amount
       * @description Limit price to transact
       */
      limit_price?: string;
      /**
       * Format: amount
       * @description Limit volume to transact
       */
      limit_volume?: string;
      /** @description The order reference */
      order_id?: string;
      /** @description Specifies the market */
      pair?: string;
      /**
       * @description The intention of the order, whether to buy or sell funds in the market.
       *
       * You can use this to determine the flow of funds in the order.
       * @enum {string}
       */
      side?: "BUY" | "SELL";
      /**
       * @description The current state of the order
       *
       * Status meaning:<br>
       * <code>AWAITING</code> The order is awaiting to enter the order book.<br>
       * <code>PENDING</code> The order is in the order book. Some trades may
       * have taken place but the order is not filled yet.<br>
       * <code>COMPLETE</code> The order is no longer in the order book. It has
       * been settled/filled or has been cancelled.
       * @enum {string}
       */
      status?: "AWAITING" | "PENDING" | "COMPLETE";
      /**
       * @description Direction to trigger the order
       * @enum {string}
       */
      stop_direction?: "ABOVE" | "BELOW";
      /**
       * Format: amount
       * @description Price to trigger the order
       */
      stop_price?: string;
      /**
       * @description The Time in force option used when the LimitOrder was posted.
       *
       * Only returned on limit orders.<br>
       * <code>GTC</code> Good 'Til Cancelled. The order remains open until it is filled or cancelled by the user. (default)</br>
       * <code>IOC</code> Immediate Or Cancel. The part of the order that cannot be filled immediately will be cancelled. Cannot be post-only.</br>
       * <code>FOK</code> Fill Or Kill. If the order cannot be filled immediately and completely it will be cancelled before any trade. Cannot be post-only.
       */
      time_in_force?: string;
      /**
       * @description The order type
       * @enum {string}
       */
      type?: "LIMIT" | "MARKET" | "STOP_LIMIT";
    };
    /**
     * GetOrderBookResponse response for:
     * @description 1/orderbook
     * 1/orderbook_top
     */
    GetOrderBookResponse: {
      /** @description List of asks sorted from lowest to highest price */
      asks?: components["schemas"]["OrderBookEntry"][];
      /** @description List of bids sorted from highest to lowest price */
      bids?: components["schemas"]["OrderBookEntry"][];
      /**
       * Format: int64
       * @description Unix timestamp in milliseconds
       */
      timestamp?: number;
    };
    /** @description GetOrderResponse response */
    GetOrderResponse: {
      /**
       * Format: amount
       * @description Amount of base filled, this value is always positive.
       */
      base?: string;
      /**
       * Format: timestamp
       * @description Time of order completion (Unix milliseconds)
       *
       * This value is set at the time of this order leaving the order book,
       * either immediately upon posting or later on due to a trade or cancellation.
       * Whilst the order is still pending/live it will be 0.
       */
      completed_timestamp?: string;
      /**
       * Format: amount
       * @description Amount of counter filled, this value is always positive.
       */
      counter?: string;
      /**
       * Format: timestamp
       * @description Time of order creation (Unix milliseconds)
       */
      creation_timestamp?: string;
      /**
       * Format: timestamp
       * @description Time of order expiration (Unix milliseconds)
       *
       * This value is set at the time of processing a request from you to cancel the order, otherwise it will be 0.
       */
      expiration_timestamp?: string;
      /**
       * Format: amount
       * @description Base amount of fees to be charged
       */
      fee_base?: string;
      /**
       * Format: amount
       * @description Counter amount of fees to be charged
       */
      fee_counter?: string;
      /**
       * Format: amount
       * @description Limit price to transact
       */
      limit_price?: string;
      /**
       * Format: amount
       * @description Limit volume to transact
       */
      limit_volume?: string;
      order_id?: string;
      /** @description Specifies the market. */
      pair?: string;
      /**
       * @description <code>PENDING</code> The order has been placed. Some trades may have
       * taken place but the order is not filled yet.<br>
       * <code>COMPLETE</code> The order is no longer active. It has been settled
       * or has been cancelled.
       * @enum {string}
       */
      state?: "PENDING" | "COMPLETE";
      /**
       * @description The Time in force option used when the LimitOrder was posted.
       *
       * Only returned on limit orders.<br>
       * <code>GTC</code> Good 'Til Cancelled. The order remains open until it is filled or cancelled by the user. (default)</br>
       * <code>IOC</code> Immediate Or Cancel. The part of the order that cannot be filled immediately will be cancelled. Cannot be post-only.</br>
       * <code>FOK</code> Fill Or Kill. If the order cannot be filled immediately and completely it will be cancelled before any trade. Cannot be post-only.
       */
      time_in_force?: string;
      /**
       * @description <code>BUY</code> buy market order.<br>
       * <code>SELL</code> sell market order.<br>
       * <code>BID</code> bid (buy) limit order.<br>
       * <code>ASK</code> ask (sell) limit order.
       * @enum {string}
       */
      type?: "BUY" | "SELL" | "BID" | "ASK";
    };
    /** @description GetTickerResponse response for /api/ticker */
    GetTickerResponse: {
      /**
       * Format: amount
       * @description The lowest ask price
       */
      ask?: string;
      /**
       * Format: amount
       * @description The highest bid price
       */
      bid?: string;
      /**
       * Format: amount
       * @description Last trade price
       */
      last_trade?: string;
      pair?: string;
      /**
       * Format: amount
       * @description 24h rolling trade volume
       */
      rolling_24_hour_volume?: string;
      /**
       * @description Market current status
       *
       * <code>ACTIVE</code> when the market is trading normally
       *
       * <code>POSTONLY</code> when the market has been suspended and only post-only orders will be accepted
       *
       * <code>DISABLED</code> when the market is shutdown and no orders can be accepted
       * @example ACTIVE
       * @enum {string}
       */
      status?: "ACTIVE" | "POSTONLY" | "DISABLED";
      /**
       * Format: timestamp
       * @description Unix timestamp in milliseconds of the tick
       */
      timestamp?: string;
    };
    /** @description GetWithdrawalResponse response */
    GetWithdrawalResponse: {
      /**
       * Format: amount
       * @description Amount to withdraw
       */
      amount?: string;
      /**
       * Format: timestamp
       * @description Unix time the withdrawal was initiated, in milliseconds
       */
      created_at?: string;
      /**
       * @description Withdrawal currency.
       * @example EUR
       */
      currency?: string;
      /** @description External ID has the value that was passed in when the Withdrawal request was posted. */
      external_id?: string;
      /**
       * Format: amount
       * @description Withdrawal fee
       */
      fee?: string;
      id?: string;
      /**
       * @description Status
       * @enum {string}
       */
      status?: "PENDING" | "PROCESSING" | "COMPLETED" | "CANCELLED" | "WAITING" | "CANCELLING" | "UNKNOWN";
      /**
       * @description Type distinguishes between different withdrawal methods where more than one is supported
       * for the given currency.
       * @example SGD_WIRE
       */
      type?: string;
    };
    /** @description ListMovesResponse response */
    ListMovesResponse: {
      moves?: components["schemas"]["FundsMove"][];
    };
    /** @description ListOrders2Response response for /api/2/listorders */
    ListOrders2Response: {
      orders?: components["schemas"]["OrderV2"][];
    };
    /** @description ListOrdersResponse response */
    ListOrdersResponse: {
      orders?: components["schemas"]["Order"][];
    };
    /** @description ListTickersResponse response for /api/tickers */
    ListTickersResponse: {
      tickers?: components["schemas"]["Ticker"][];
    };
    /** @description ListTradesResponse response for /api/1/trades */
    ListTradesResponse: {
      trades?: components["schemas"]["PublicTrade"][];
    };
    /** @description ListTransactionsResponse response */
    ListTransactionsResponse: {
      /** Format: int64 */
      id?: string;
      transactions?: components["schemas"]["Transaction"][];
    };
    /** @description ListTransfersResponse response for /api/1/transfers */
    ListTransfersResponse: {
      transfers?: components["schemas"]["Transfer"][];
    };
    /** @description ListUserTradesResponse response for /api/1/listtrades */
    ListUserTradesResponse: {
      trades?: components["schemas"]["TradeV2"][];
    };
    /** @description ListWithdrawalsResponse response */
    ListWithdrawalsResponse: {
      withdrawals?: components["schemas"]["Withdrawal"][];
    };
    /** @description MarketInfo current market information */
    MarketInfo: {
      /**
       * @description Base currency code
       * @example XBT
       */
      base_currency?: string;
      /**
       * @description Counter currency code
       * @example EUR
       */
      counter_currency?: string;
      /**
       * Format: int64
       * @description Fee decimal places
       */
      fee_scale?: number;
      /**
       * @description Unique identifier for the market
       * @example XBTEUR
       */
      market_id?: string;
      /**
       * Format: amount
       * @description Maximum order price
       * @example 100000.00
       */
      max_price?: string;
      /**
       * Format: amount
       * @description Maximum order volume
       * @example 100.0
       */
      max_volume?: string;
      /**
       * Format: amount
       * @description Minimum order price
       * @example 100.00
       */
      min_price?: string;
      /**
       * Format: amount
       * @description Minimum order volume
       * @example 0.0005
       */
      min_volume?: string;
      /**
       * Format: int64
       * @description Price decimal places
       * @example 2
       */
      price_scale?: number;
      /**
       * @description Current market trading status:<br>
       * <code>POST_ONLY</code> Trading is indefinitely suspended. This state is
       * commonly used when new markets are being launched to give traders enough
       * time to setup their orders before trading begins. When in this status,
       * orders can only be posted as post-only.<br>
       * <code>ACTIVE</code> Trading is fully enabled.<br>
       * <code>SUSPENDED</code> Trading has been temporarily suspended due to very
       * high volatility. When in this status, orders can only be posted as
       * post-only.<br>
       * @enum {string}
       */
      trading_status?: "POST_ONLY" | "ACTIVE" | "SUSPENDED";
      /**
       * Format: int64
       * @description Volume decimal places
       * @example 4
       */
      volume_scale?: number;
    };
    /** @description MarketsInfoResponse response for /api/2/markets */
    MarketsInfoResponse: {
      markets?: components["schemas"]["MarketInfo"][];
    };
    /** @description MoveResponse response */
    MoveResponse: {
      /** @description Move unique identifier */
      id?: string;
      /**
       * @description The current state of the move.
       *
       * Status meaning:<br>
       * <code>CREATED</code> The move is awaiting execution.<br>
       * <code>MOVING</code> The funds have been reserved and the move is being executed.<br>
       * <code>SUCCESSFUL</code> The move has completed successfully and should be reflected in both accounts available
       * balance.<br>
       * <code>FAILED</code> The move has failed. There could be many reasons for this but the most likely is that the
       * debit account doesn't have enough available funds to move.<br>
       * @enum {string}
       */
      status?: "CREATED" | "MOVING" | "SUCCESSFUL" | "FAILED";
    };
    /**
     * Order data
     * @description The `base` and `counter` amounts are the principal
     * amounts that were traded, ignoring fees. For example, if the order resulted
     * in a single trade of 1 BTC for 1000 ZAR, then `base`=1 BTC and
     * `counter`=1000 ZAR.
     *
     * The `fee_base` and `fee_counter` amounts are the fees
     * debited after the trade principal amounts.
     *
     * For example, for a buy order, `base - base_fee` would be credited
     * to the BTC account and `counter + counter_fee` would be debited
     * from the ZAR account. Similarly, for a sell order, `counter -
     * counter_fee` would be credited to the ZAR account and `base +
     * base_fee` would be debited from the BTC account.
     */
    Order: {
      /**
       * Format: amount
       * @description Amount of base filled, this value is always positive.
       */
      base?: string;
      /**
       * Format: timestamp
       * @description Time of order completion (Unix milliseconds)
       *
       * This value is set at the time of this order leaving the order book,
       * either immediately upon posting or later on due to a trade or cancellation.
       * Whilst the order is still pending/live it will be 0.
       */
      completed_timestamp?: string;
      /**
       * Format: amount
       * @description Amount of counter filled, this value is always positive.
       */
      counter?: string;
      /**
       * Format: timestamp
       * @description Time of order creation (Unix milliseconds)
       */
      creation_timestamp?: string;
      /**
       * Format: timestamp
       * @description Time of order expiration (Unix milliseconds)
       *
       * This value is set at the time of processing a request from you to cancel the order, otherwise it will be 0.
       */
      expiration_timestamp?: string;
      /**
       * Format: amount
       * @description Base amount of fees to be charged
       */
      fee_base?: string;
      /**
       * Format: amount
       * @description Counter amount of fees to be charged
       */
      fee_counter?: string;
      /**
       * Format: amount
       * @description Limit price to transact
       */
      limit_price?: string;
      /**
       * Format: amount
       * @description Limit volume to transact
       */
      limit_volume?: string;
      order_id?: string;
      /** @description Specifies the market. */
      pair?: string;
      /**
       * @description <code>PENDING</code> The order has been placed. Some trades may have
       * taken place but the order is not filled yet.<br>
       * <code>COMPLETE</code> The order is no longer active. It has been settled
       * or has been cancelled.
       * @enum {string}
       */
      state?: "PENDING" | "COMPLETE";
      /**
       * @description The Time in force option used when the LimitOrder was posted.
       *
       * Only returned on limit orders.<br>
       * <code>GTC</code> Good 'Til Cancelled. The order remains open until it is filled or cancelled by the user. (default)</br>
       * <code>IOC</code> Immediate Or Cancel. The part of the order that cannot be filled immediately will be cancelled. Cannot be post-only.</br>
       * <code>FOK</code> Fill Or Kill. If the order cannot be filled immediately and completely it will be cancelled before any trade. Cannot be post-only.
       */
      time_in_force?: string;
      /**
       * @description <code>BUY</code> buy market order.<br>
       * <code>SELL</code> sell market order.<br>
       * <code>BID</code> bid (buy) limit order.<br>
       * <code>ASK</code> ask (sell) limit order.
       * @enum {string}
       */
      type?: "BUY" | "SELL" | "BID" | "ASK";
    };
    /** OrderBook represents a market order book state at a certain time. */
    OrderBook: {
      /** @description List of asks sorted from lowest to highest price */
      asks?: components["schemas"]["OrderBookEntry"][];
      /** @description List of bids sorted from highest to lowest price */
      bids?: components["schemas"]["OrderBookEntry"][];
      /**
       * Format: int64
       * @description Unix timestamp in milliseconds
       */
      timestamp?: number;
    };
    /**
     * @description OrderBookEntry is the representation of one or more order resting in the
     * order book.
     */
    OrderBookEntry: {
      /**
       * Format: amount
       * @description Limit price at which orders are trading at
       * @example 10000.0
       */
      price?: string;
      /**
       * Format: amount
       * @description The volume available at the limit price
       * @example 1.35
       */
      volume?: string;
    };
    OrderV2: {
      /**
       * Format: amount
       * @description Amount of base filled, this value is always positive.
       *
       * Use this field and `side` to determine credit or debit of funds.
       */
      base?: string;
      /**
       * Format: int64
       * @description The base account ID used to place the order
       */
      base_account_id?: number;
      /** @description Client Order ID has the value that was passed in when the Order was posted. */
      client_order_id?: string;
      /**
       * Format: timestamp
       * @description Time of order completion (Unix milliseconds)
       *
       * This value is set at the time of this order leaving the order book,
       * either immediately upon posting or later on due to a trade or cancellation.
       * Whilst the order is still pending/live it will be 0.
       */
      completed_timestamp?: string;
      /**
       * Format: amount
       * @description Amount of counter filled, this value is always positive.
       *
       * Use this field and `side` to determine credit or debit of funds.
       */
      counter?: string;
      /**
       * Format: int64
       * @description The counter account ID used to place the order
       */
      counter_account_id?: number;
      /**
       * Format: timestamp
       * @description Time of order creation (Unix milliseconds)
       */
      creation_timestamp?: string;
      /**
       * Format: timestamp
       * @description Time of order expiration (Unix milliseconds)
       *
       * This value is set at the time of processing a request from you to cancel the order, otherwise it will be 0.
       */
      expiration_timestamp?: string;
      /**
       * Format: amount
       * @description Base amount of fees to be charged
       */
      fee_base?: string;
      /**
       * Format: amount
       * @description Counter amount of fees to be charged
       */
      fee_counter?: string;
      /**
       * Format: amount
       * @description Limit price to transact
       */
      limit_price?: string;
      /**
       * Format: amount
       * @description Limit volume to transact
       */
      limit_volume?: string;
      /** @description The order reference */
      order_id?: string;
      /** @description Specifies the market */
      pair?: string;
      /**
       * @description The intention of the order, whether to buy or sell funds in the market.
       *
       * You can use this to determine the flow of funds in the order.
       * @enum {string}
       */
      side?: "BUY" | "SELL";
      /**
       * @description The current state of the order
       *
       * Status meaning:<br>
       * <code>AWAITING</code> The order is awaiting to enter the order book.<br>
       * <code>PENDING</code> The order is in the order book. Some trades may
       * have taken place but the order is not filled yet.<br>
       * <code>COMPLETE</code> The order is no longer in the order book. It has
       * been settled/filled or has been cancelled.
       * @enum {string}
       */
      status?: "AWAITING" | "PENDING" | "COMPLETE";
      /**
       * @description Direction to trigger the order
       * @enum {string}
       */
      stop_direction?: "ABOVE" | "BELOW";
      /**
       * Format: amount
       * @description Price to trigger the order
       */
      stop_price?: string;
      /**
       * @description The Time in force option used when the LimitOrder was posted.
       *
       * Only returned on limit orders.<br>
       * <code>GTC</code> Good 'Til Cancelled. The order remains open until it is filled or cancelled by the user. (default)</br>
       * <code>IOC</code> Immediate Or Cancel. The part of the order that cannot be filled immediately will be cancelled. Cannot be post-only.</br>
       * <code>FOK</code> Fill Or Kill. If the order cannot be filled immediately and completely it will be cancelled before any trade. Cannot be post-only.
       */
      time_in_force?: string;
      /**
       * @description The order type
       * @enum {string}
       */
      type?: "LIMIT" | "MARKET" | "STOP_LIMIT";
    };
    /** PostLimitOrderResponse is the response for /api/1/postorder. */
    PostLimitOrderResponse: {
      /**
       * @description Unique order identifier
       * @example BXMC2CJ7HNB88U4
       */
      order_id?: string;
    };
    /** PostMarketOrderResponse is the response for /api/1/marketorder. */
    PostMarketOrderResponse: {
      /**
       * @description Unique order identifier
       * @example BXMC2CJ7HNB88U4
       */
      order_id?: string;
    };
    /** PublicTrade contains only basic information about a trade. */
    PublicTrade: {
      /** @description Whether the taker was buying or not. */
      is_buy?: boolean;
      /**
       * Format: amount
       * @description Price at which the asset traded at
       */
      price?: string;
      /**
       * Format: int64
       * @description The ever incrementing trade identifier within a market
       */
      sequence?: number;
      /**
       * Format: timestamp
       * @description Unix timestamp in milliseconds
       */
      timestamp?: string;
      /**
       * Format: amount
       * @description Amount of assets traded
       */
      volume?: string;
    };
    /** @description AddressResp wallet address response body */
    ReceiveAddress: {
      /** Format: int64 */
      account_id?: string;
      address?: string;
      address_meta?: components["schemas"]["AddressMeta"][];
      asset?: string;
      /** Format: timestamp */
      assigned_at?: string;
      name?: string;
      qr_code_uri?: string;
      /** Format: amount */
      receive_fee?: string;
      /** Format: amount */
      total_received?: string;
      /** Format: amount */
      total_unconfirmed?: string;
    };
    /** @description SendFeeResponse response object for send fee call */
    SendFeeResponse: {
      currency?: string;
      /** Format: amount */
      fee?: string;
    };
    StopOrderResponse: {
      success?: boolean;
    };
    /** @description Ticker summarised instant market data */
    Ticker: {
      /**
       * Format: amount
       * @description The lowest ask price
       */
      ask?: string;
      /**
       * Format: amount
       * @description The highest bid price
       */
      bid?: string;
      /**
       * Format: amount
       * @description Last trade price
       */
      last_trade?: string;
      pair?: string;
      /**
       * Format: amount
       * @description 24h rolling trade volume
       */
      rolling_24_hour_volume?: string;
      /**
       * @description Market current status
       *
       * <code>ACTIVE</code> when the market is trading normally
       *
       * <code>POSTONLY</code> when the market has been suspended and only post-only orders will be accepted
       *
       * <code>DISABLED</code> when the market is shutdown and no orders can be accepted
       * @example ACTIVE
       * @enum {string}
       */
      status?: "ACTIVE" | "POSTONLY" | "DISABLED";
      /**
       * Format: timestamp
       * @description Unix timestamp in milliseconds of the tick
       */
      timestamp?: string;
    };
    /** @description TradeDetails contains a transaction volume, price and pair */
    TradeDetails: {
      /** @description Pair of the market */
      pair?: string;
      /**
       * Format: amount
       * @description Price at which the volume traded for
       */
      price?: string;
      /**
       * Format: int64
       * @description Sequence identifies the trade within a market
       */
      sequence?: number;
      /**
       * Format: amount
       * @description Volume is the amount of base traded
       */
      volume?: string;
    };
    TradeV2: {
      /**
       * Format: amount
       * @description Amount of base filled
       */
      base?: string;
      /** @description Client Order ID has the value that was passed in when the Order was posted. */
      client_order_id?: string;
      /**
       * Format: amount
       * @description Amount of counter filled
       */
      counter?: string;
      /**
       * Format: amount
       * @description Base amount of fees charged
       */
      fee_base?: string;
      /**
       * Format: amount
       * @description Counter amount of fees charged
       */
      fee_counter?: string;
      is_buy?: boolean;
      /**
       * @description Unique order identifier
       * @example BXMC2CJ7HNB88U4
       */
      order_id?: string;
      /** @description Currency pair */
      pair?: string;
      /**
       * Format: amount
       * @description Order price
       */
      price?: string;
      /** Format: int64 */
      sequence?: number;
      /**
       * Format: timestamp
       * @description Unix timestamp in milliseconds
       */
      timestamp?: string;
      /**
       * @description Order type
       * @enum {string}
       */
      type?: "BID" | "ASK";
      /**
       * Format: amount
       * @description Order volume
       */
      volume?: string;
    };
    Transaction: {
      /** Format: int64 */
      account_id?: string;
      /**
       * Format: amount
       * @description Amount available
       */
      available?: string;
      /**
       * Format: amount
       * @description Change in amount available
       */
      available_delta?: string;
      /**
       * Format: amount
       * @description Account balance
       */
      balance?: string;
      /**
       * Format: amount
       * @description Change in balance
       */
      balance_delta?: string;
      currency?: string;
      /** @description Human-readable description of the transaction. */
      description?: string;
      detail_fields?: components["schemas"]["DetailFields"];
      /** @description Human-readable label-value attributes. */
      details?: {
        [key: string]: string;
      };
      /**
       * @description The kind of the transaction indicates the transaction flow
       *
       * Kinds explained:<br>
       * <code>FEE</code> when transaction is towards Luno fees<br>
       * <code>TRANSFER</code> when the transaction is a one way flow of funds, e.g. a deposit or crypto send<br>
       * <code>EXCHANGE</code> when the transaction is part of a two way exchange, e.g. a trade or instant buy
       * @enum {string}
       */
      kind?: "FEE" | "TRANSFER" | "EXCHANGE" | "INTEREST";
      /**
       * @description A unique reference for the transaction this statement entry relates to.
       * There may be multiple statement entries related to the same transaction.
       * E.g. a withdrawal and the withdrawal fee are two separate statement entries with the same reference.
       */
      reference?: string;
      /** Format: int64 */
      row_index?: number;
      /**
       * Format: timestamp
       * @description Unix timestamp, in milliseconds
       */
      timestamp?: string;
    };
    /** Transfer represents a credit or debit operation on an account. */
    Transfer: {
      /**
       * Format: amount
       * @description Amount that has been credited or debited on the account. This is always a
       * positive value regardless of the transfer direction.
       */
      amount?: string;
      /**
       * Format: timestamp
       * @description Unix timestamp the transfer was initiated, in milliseconds
       */
      created_at?: string;
      /**
       * Format: amount
       * @description Fee that has been charged by Luno with regards to this transfer.
       * This is not included in the `amount`.
       * For example, if you receive a transaction with the raw amount of 1 BTC
       * and we charge a `fee` of 0.003 BTC on this transaction you will be
       * credited the `amount` of 0.997 BTC.
       */
      fee?: string;
      /** @description Transfer unique identifier */
      id?: string;
      /** @description True for credit transfers, false for debits. */
      inbound?: boolean;
      /**
       * @description When the transfer reflects an on-chain transaction this field will have
       * the transaction ID.
       * @example fe4d49620bfd6778de38e9609f491c3327b882749541dbd44d7651c533a99a1c
       */
      transaction_id?: string;
    };
    /** @description Withdrawal struct */
    Withdrawal: {
      /**
       * Format: amount
       * @description Amount to withdraw
       */
      amount?: string;
      /**
       * Format: timestamp
       * @description Unix time the withdrawal was initiated, in milliseconds
       */
      created_at?: string;
      /**
       * @description Withdrawal currency.
       * @example EUR
       */
      currency?: string;
      /** @description External ID has the value that was passed in when the Withdrawal request was posted. */
      external_id?: string;
      /**
       * Format: amount
       * @description Withdrawal fee
       */
      fee?: string;
      id?: string;
      /**
       * @description Status
       * @enum {string}
       */
      status?: "PENDING" | "PROCESSING" | "COMPLETED" | "CANCELLED" | "WAITING" | "CANCELLING" | "UNKNOWN";
      /**
       * @description Type distinguishes between different withdrawal methods where more than one is supported
       * for the given currency.
       * @example SGD_WIRE
       */
      type?: string;
    };
    beneficiary: {
      bank_account_branch?: string;
      bank_account_number?: string;
      bank_account_type?: string;
      bank_country?: string;
      bank_name?: string;
      bank_recipient?: string;
      /** Format: int64 */
      created_at?: number;
      id?: string;
      supports_fast_withdrawals?: boolean;
    };
    createAccountResponse: {
      currency?: string;
      /** Format: int64 */
      id?: string;
      name?: string;
    };
    /** @description CreateFundingAddressResponse create wallet response body */
    createFundingAddressResponse: {
      /** Format: int64 */
      account_id?: string;
      address?: string;
      address_meta?: components["schemas"]["AddressMeta"][];
      asset?: string;
      /** Format: timestamp */
      assigned_at?: string;
      name?: string;
      qr_code_uri?: string;
      /** Format: amount */
      receive_fee?: string;
      /** Format: amount */
      total_received?: string;
      /** Format: amount */
      total_unconfirmed?: string;
    };
    /** @description GetBalancesResponse balance lookup response */
    getBalancesResponse: {
      balance?: components["schemas"]["AccountBalance"][];
    };
    /** @description GetFeeInfoResponse response object for get fee info calls */
    getFeeInfoResponse: {
      maker_fee?: string;
      taker_fee?: string;
      thirty_day_volume?: string;
    };
    /** @description GetFundingAddressResponse get funding address response body */
    getFundingAddressResponse: {
      /** Format: int64 */
      account_id?: string;
      address?: string;
      address_meta?: components["schemas"]["AddressMeta"][];
      asset?: string;
      /** Format: timestamp */
      assigned_at?: string;
      name?: string;
      qr_code_uri?: string;
      /** Format: amount */
      receive_fee?: string;
      /** Format: amount */
      total_received?: string;
      /** Format: amount */
      total_unconfirmed?: string;
    };
    /** @description ListBeneficiariesResponse response object for list beneficiaries */
    listBeneficiariesResponse: {
      beneficiaries?: components["schemas"]["beneficiary"][];
    };
    /** @description ListPendingTransactionsResponse */
    listPendingTransactionsResponse: {
      currency?: string;
      /** Format: int64 */
      id?: string;
      name?: string;
      pending?: components["schemas"]["Transaction"][];
      transactions?: components["schemas"]["Transaction"][];
    };
    sendResponse: {
      success?: boolean;
      withdrawal_id?: string;
    };
    updateAccountNameResponse: {
      success?: boolean;
    };
    /** @description validateAddressResponse is the non error response of an address validation request */
    validateAddressResponse: {
      success?: boolean;
    };
  };
  responses: {
    /** @description Error */
    apiError: {
      content: {
        "application/json": {
          /** @description Unique error reference */
          code?: string;
          /** @description Verbose error message */
          message?: string;
        };
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * # Create account
   * @description This request creates an Account for the specified currency.  Please note that the balances for the Account will be displayed based on the <code>asset</code> value, which is the currency the Account is based on.
   *
   * Permissions required: <code>Perm_W_Addresses</code>
   */
  createAccount: {
    parameters: {
      query: {
        /**
         * @description The currency code for the Account you want to create.  Please see the Currency section for a detailed list of currencies supported by the Luno platform.
         *
         * Users must be verified to trade currency in order to be able to create an Account.  For more information on the verification process, please see <a href="/help/en/articles/1000168396">How do I verify my identity?</a>.
         *
         * Users have a limit of 10 accounts per currency.
         * @example XBT
         */
        currency: string;
        /**
         * @description The label to use for this account
         * @example Trading ACC
         */
        name: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["createAccountResponse"];
        };
      };
    };
  };
  /**
   * # Update Account Name
   * @description Update the name of an account with a given ID.
   *
   * Permissions required: <code>Perm_W_Addresses</code>
   */
  updateAccountName: {
    parameters: {
      query: {
        /**
         * @description The label to use for this account
         * @example Trading ACC
         */
        name: string;
      };
      path: {
        /**
         * @description Account ID - the unique identifier for the specific Account.
         * @example 12345
         */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["updateAccountNameResponse"];
        };
      };
    };
  };
  /**
   * # List pending transactions
   * @description Return a list of all transactions that have not completed for the Account.
   *
   * Pending transactions are not numbered, and may be reordered, deleted or updated at any time.
   *
   * Permissions required: <code>Perm_R_Transactions</code>
   */
  listPendingTransactions: {
    parameters: {
      path: {
        /**
         * @description Account ID
         * @example 12345
         */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["listPendingTransactionsResponse"];
        };
      };
    };
  };
  /**
   * # List transactions
   * @description Return a list of transaction entries from an account.
   *
   * Transaction entry rows are numbered sequentially starting from 1, where 1 is
   * the oldest entry. The range of rows to return are specified with the
   * <code>min_row</code> (inclusive) and <code>max_row</code> (exclusive)
   * parameters. At most 1000 rows can be requested per call.
   *
   * If <code>min_row</code> or <code>max_row</code> is non-positive, the range
   * wraps around the most recent row. For example, to fetch the 100 most recent
   * rows, use <code>min_row=-100</code> and <code>max_row=0</code>.
   *
   * Permissions required: <code>Perm_R_Transactions</code>
   */
  ListTransactions: {
    parameters: {
      query: {
        /**
         * @description Minimum of the row range to return (inclusive)
         * @example 1
         */
        min_row: number;
        /**
         * @description Maximum of the row range to return (exclusive)
         * @example 1000
         */
        max_row: number;
      };
      path: {
        /**
         * @description Account ID - the unique identifier for the specific Account.
         * @example 12345
         */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListTransactionsResponse"];
        };
      };
    };
  };
  /**
   * # Validate
   * @description Validate receive addresses, to which a customer wishes to make cryptocurrency sends, are verified under covering
   * regulatory requirements for the customer such as travel rules.
   *
   * Permissions required: <code>Perm_W_Send</code>
   */
  validate: {
    parameters: {
      query: {
        /**
         * @description Destination address or email address.
         *
         * <b>Note</b>:
         * <ul>
         * <li>Ethereum addresses must be
         * <a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md" target="_blank" rel="nofollow">checksummed</a>.</li>
         * <li>Ethereum validations of email addresses are not supported.</li>
         * </ul>
         * @example 1AbbJJzevwFFVBKvZRtQHHFgrJyYTKaMw2
         */
        address: string;
        /**
         * @description Currency is the currency associated with the address.
         * @example XBT
         */
        currency: string;
        /**
         * @description AddressName is the optional name under which to store the address as in the address book.
         * @example MyNamedAddress
         */
        address_name?: string;
        /**
         * @description Optional boolean flag indicating that a XRP destination tag is provided (even if zero).
         * @example true
         */
        has_destination_tag?: boolean;
        /**
         * @description Optional XRP destination tag. Note that HasDestinationTag must be true if this value is provided.
         * @example 12345
         */
        destination_tag?: number;
        /**
         * @description Optional memo string used to provide account information for ATOM, etc. where it holds "account" information
         * for a generic address.
         * @example Test:TEST-test ?;lsbjaciuq12712837519*T*&$^572
         */
        memo?: string;
        /**
         * @description IsSelfSend to indicate that the address belongs to the customer.
         * If this field is true then the remaining omitempty fields should not
         * be populated.
         */
        is_self_send?: boolean;
        /** @description IsPrivateWallet indicates if the address is for private wallet and not held at an exchange. */
        is_private_wallet?: boolean;
        /**
         * @description PrivateWalletName is the name of the private wallet
         * @example John Smith's Wallet or Luno or MX Exchange
         */
        wallet_name?: string;
        /**
         * @description BeneficiaryName is the name of the beneficial owner if is it is a private address
         * @example John Smith
         */
        beneficiary_name?: string;
        /**
         * @description IsLegalEntity indicates if the address is for a legal entity and not a private beneficiary.
         * If this field is true then the fields BeneficiaryName, Nationality & DateOfBirth should be empty but the
         * fields InstitutionName and Country should be populated.
         * If this field is false and IsSelfSend is false (or empty) then the field InstitutionName should be empty but the
         * fields BeneficiaryName, Nationality & DateOfBirth and Country should be populated.
         */
        is_legal_entity?: boolean;
        /**
         * @description InstitutionName is the name of the beneficial owner if is it is a legal entities address
         * @example Some Co Ltd
         */
        institution_name?: string;
        /**
         * @description Country is the ISO 3166-1 country code of the beneficial owner of the address
         * @example MYS
         */
        country?: string;
        /**
         * @description PhysicalAddress is the legal physical address of the beneficial owner of the crypto address
         * @example 1970-01-01
         */
        physical_address?: string;
        /**
         * @description Nationality ISO 3166-1 country code of the nationality of the (non-institutional) beneficial owner of the address
         * @example MYS
         */
        nationality?: string;
        /**
         * @description DateOfBirth is the date of birth of the (non-institutional) beneficial owner of the address in the form "YYYY-MM-DD"
         * @example 1970-01-01
         */
        date_of_birth?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["validateAddressResponse"];
        };
      };
    };
  };
  /**
   * # List account balances
   * @description The list of all Accounts and their respective balances for the requesting user.
   *
   * Permissions required: <code>Perm_R_Balance</code>
   */
  getBalances: {
    parameters: {
      query?: {
        /**
         * @description Only return balances for wallets with these currencies (if not provided,
         * all balances will be returned). To request balances for multiple currencies,
         * pass the parameter multiple times,
         * e.g. `assets=XBT&assets=ETH`.
         * @example XBT
         */
        assets?: string[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["getBalancesResponse"];
        };
      };
    };
  };
  /**
   * # List beneficiaries
   * @description Returns a list of bank beneficiaries.
   *
   * Permissions required: <code>Perm_R_Beneficiaries</code>
   */
  listBeneficiariesResponse: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["listBeneficiariesResponse"];
        };
      };
    };
  };
  /**
   * # Get fee information
   * @description Returns the fees and 30 day trading volume (as of midnight) for a given currency pair.  For complete details, please see <a href="en/countries">Fees & Features</a>.
   *
   * Permissions required: <code>Perm_R_Orders</code>
   */
  getFeeInfo: {
    parameters: {
      query: {
        /**
         * @description Get fee information about this pair.
         * @example XBTZAR
         */
        pair: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["getFeeInfoResponse"];
        };
      };
    };
  };
  /**
   * # Get receive address
   * @description Returns the default receive address associated with your account and the
   * amount received via the address. Users can specify an optional address parameter to return information for a non-default receive address.
   * In the response, <code>total_received</code> is the total confirmed amount received excluding unconfirmed transactions.
   * <code>total_unconfirmed</code> is the total sum of unconfirmed receive transactions.
   *
   * Permissions required: <code>Perm_R_Addresses</code>
   */
  getFundingAddress: {
    parameters: {
      query: {
        /**
         * @description Currency code of the asset.
         * @example XBT
         */
        asset: string;
        /**
         * @description Specific cryptocurrency address to retrieve. If not provided, the
         * default address will be used.
         * @example 1AbbJJzevwFFVBKvZRtQHHFgrJyYTKaMw2
         */
        address?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["getFundingAddressResponse"];
        };
      };
    };
  };
  /**
   * # Create receive address
   * @description Allocates a new receive address to your account. There is a rate limit of 1
   * address per hour, but bursts of up to 10 addresses are allowed. Only 1
   * Ethereum receive address can be created.
   *
   * Permissions required: <code>Perm_W_Addresses</code>
   */
  createFundingAddress: {
    parameters: {
      query: {
        /**
         * @description Currency code of the asset.
         * @example XBT
         */
        asset: string;
        /**
         * @description An optional name for the new Receive Address
         * @example My BTC wallet
         */
        name?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["createFundingAddressResponse"];
        };
      };
    };
  };
  /**
   * # List orders
   * @description Returns a list of the most recently placed Orders.
   * Users can specify an optional <code>state=PENDING</code> parameter to restrict the results to only open Orders.
   * Users can also specify the market by using the optional currency pair parameter.
   *
   * Permissions required: <code>Perm_R_Orders</code>
   */
  ListOrders: {
    parameters: {
      query?: {
        /**
         * @description Filter to only orders of this state
         * @example PENDING
         */
        state?: "PENDING" | "COMPLETE";
        /**
         * @description Filter to only orders of this currency pair
         * @example XBTZAR
         */
        pair?: string;
        /**
         * @description Filter to orders created before this timestamp (Unix milliseconds)
         * @example 1530865703508
         */
        created_before?: number;
        /**
         * @description Limit to this many orders
         * @example 986
         */
        limit?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListOrdersResponse"];
        };
      };
    };
  };
  /**
   * # List trades
   * @description Returns a list of the recent Trades for a given currency pair for this user, sorted by oldest first.
   * If <code>before</code> is specified, then Trades are returned sorted by most-recent first.
   *
   * <code>type</code> in the response indicates the type of Order that was placed to participate in the trade.
   * Possible types: <code>BID</code>, <code>ASK</code>.
   *
   * If <code>is_buy</code> in the response is true, then the Order which completed the trade (market taker) was a Bid Order.
   *
   * Results of this query may lag behind the latest data.
   *
   * Permissions required: <code>Perm_R_Orders</code>
   */
  ListUserTrades: {
    parameters: {
      query: {
        /**
         * @description Filter to trades of this currency pair.
         * @example XBTZAR
         */
        pair: string;
        /**
         * @description Filter to trades on or after this timestamp (Unix milliseconds).
         * @example 1470810728478
         */
        since?: string;
        /**
         * @description Filter to trades before this timestamp (Unix milliseconds).
         * @example 1470810728478
         */
        before?: string;
        /**
         * @description Filter to trades from (including) this sequence number.
         * Default behaviour is not to include this filter.
         * @example 10
         */
        after_seq?: number;
        /**
         * @description Filter to trades before (excluding) this sequence number.
         * Default behaviour is not to include this filter.
         * @example 1
         */
        before_seq?: number;
        /**
         * @description If set to true, sorts trades in descending order, otherwise ascending
         * order will be assumed.
         * @example true
         */
        sort_desc?: boolean;
        /**
         * @description Limit to this number of trades (default 100).
         * @example 100
         */
        limit?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListUserTradesResponse"];
        };
      };
    };
  };
  /**
   * # Post Market Order
   * @description A Market Order executes immediately, and either buys as much of the asset that can be bought for a set amount of fiat currency, or sells a set amount of the asset for as much as possible.
   *
   * <b>Warning!</b> Orders cannot be reversed once they have executed.
   * Please ensure your program has been thoroughly tested before submitting Orders.
   *
   * If no <code>base_account_id</code> or <code>counter_account_id</code> are specified, the default base currency or counter currency account will be used.
   * Users can find their account IDs by calling the <a href="#operation/getBalances">Balances</a> request.
   *
   * Permissions required: <code>Perm_W_Orders</code>
   */
  PostMarketOrder: {
    parameters: {
      query: {
        /**
         * @description The currency pair to trade.
         * @example XBTZAR
         */
        pair: string;
        /**
         * @description <code>BUY</code> to buy an asset<br>
         * <code>SELL</code> to sell an asset
         * @example BUY
         */
        type: "BUY" | "SELL";
        /**
         * @description For a <code>BUY</code> order: amount of the counter currency to use (e.g. how much EUR to use to buy BTC in the BTC/EUR market)
         * @example 100.50
         */
        counter_volume?: string;
        /**
         * @description For a <code>SELL</code> order: amount of the base currency to use (e.g. how much BTC to sell for EUR in the BTC/EUR market)
         * @example 1.423
         */
        base_volume?: string;
        /**
         * @description The base currency account to use in the trade.
         * @example 12345
         */
        base_account_id?: number;
        /**
         * @description The counter currency account to use in the trade.
         * @example 12345
         */
        counter_account_id?: number;
        /** @description Unix timestamp in milliseconds of when the request was created and sent. */
        timestamp?: number;
        /**
         * @description Specifies the number of milliseconds after timestamp the request is valid for.
         * If `timestamp` is not specified, `ttl` will not be used.
         * @example 5000
         */
        ttl?: number;
        /**
         * @description Client order ID.
         * May only contain alphanumeric (0-9, a-z, or A-Z) and special characters (_ ; , . -). Maximum length: 255.
         * It will be available in read endpoints, so you can use it to reconcile Luno with your internal system.
         * Values must be unique across all your successful order creation endpoint calls; trying to create an order
         * with the same `client_order_id` as one of your past orders will result in a HTTP 409 Conflict response.
         * @example mkt-53960812
         */
        client_order_id?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PostMarketOrderResponse"];
        };
      };
    };
  };
  /**
   * # Get full order book
   * @description This request returns all `bids` and `asks`, for the currency pair specified, in the Order Book.
   *
   * `asks` are sorted by price ascending and `bids` are sorted by price descending.
   *
   * Multiple orders at the same price are not aggregated.
   *
   * <b>WARNING:</b> This may return a large amount of data.
   * Users are recommended to use the <a href="#operation/getOrderBookTop">top 100 bids and asks</a>
   * or the <a href="#tag/Streaming-API">Streaming API</a>.
   */
  GetOrderBookFull: {
    parameters: {
      query: {
        /**
         * @description Currency pair of the Orders to retrieve
         * @example XBTZAR
         */
        pair: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GetOrderBookResponse"];
        };
      };
      default: components["responses"]["apiError"];
    };
  };
  /**
   * # Get top order book
   * @description This request returns the best 100 `bids` and `asks`, for the currency pair specified, in the Order Book.
   *
   * `asks` are sorted by price ascending and `bids` are sorted by price descending.
   *
   * Multiple orders at the same price are aggregated.
   */
  GetOrderBook: {
    parameters: {
      query: {
        /**
         * @description Currency pair of the Orders to retrieve
         * @example XBTZAR
         */
        pair: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GetOrderBookResponse"];
        };
      };
      default: components["responses"]["apiError"];
    };
  };
  /**
   * # Get order
   * @description Get an Order's details by its ID.
   *
   * Permissions required: <code>Perm_R_Orders</code>
   */
  GetOrder: {
    parameters: {
      path: {
        /**
         * @description Order reference
         * @example BXMC2CJ7HNB88U4
         */
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GetOrderResponse"];
        };
      };
    };
  };
  /**
   * # Post Limit Order
   * @description <b>Warning!</b> Orders cannot be reversed once they have executed.
   * Please ensure your program has been thoroughly tested before submitting Orders.
   *
   * If no <code>base_account_id</code> or <code>counter_account_id</code> are specified,
   * your default base currency or counter currency account will be used.
   * You can find your Account IDs by calling the <a href="#operation/getBalances">Balances</a> API.
   *
   * Permissions required: <code>Perm_W_Orders</code>
   */
  PostLimitOrder: {
    parameters: {
      query: {
        /**
         * @description The currency pair to trade.
         * @example XBTZAR
         */
        pair: string;
        /**
         * @description <code>BID</code> for a bid (buy) limit order<br>
         * <code>ASK</code> for an ask (sell) limit order
         * @example BID
         */
        type: "BID" | "ASK";
        /**
         * @description <code>GTC</code> Good 'Til Cancelled. The order remains open until it is filled or cancelled by the user.</br>
         * <code>IOC</code> Immediate Or Cancel. The part of the order that cannot be filled immediately will be cancelled. Cannot be post-only.</br>
         * <code>FOK</code> Fill Or Kill. If the order cannot be filled immediately and completely it will be cancelled before any trade. Cannot be post-only.
         * @example IOC
         */
        time_in_force?: "GTC" | "IOC" | "FOK";
        /**
         * @description Post-only Orders will be cancelled if they would otherwise have traded
         * immediately.
         * For example, if there's a bid at ZAR 100,000 and you place a post-only ask at ZAR 100,000,
         * your order will be cancelled instead of trading.
         * If the best bid is ZAR 100,000 and you place a post-only ask at ZAR 101,000,
         * your order won't trade but will go into the order book.
         * @example false
         */
        post_only?: boolean;
        /**
         * @description Amount of cryptocurrency to buy or sell as a decimal string in units of the currency.
         * @example 1.423
         */
        volume: string;
        /**
         * @description Limit price as a decimal string in units of ZAR/BTC.
         * @example 1200
         */
        price: string;
        /**
         * @description Trigger trade price to activate this order as a decimal string. If this
         * is set then this is treated as a Stop Limit Order and `stop_direction`
         * is expected to be set too.
         * @example 1150
         */
        stop_price?: string;
        /**
         * @description Side of the trigger price to activate the order. This should be set if `stop_price` is also
         * set.
         *
         * `RELATIVE_LAST_TRADE` will automatically infer the direction based on the last
         * trade price and the stop price. If last trade price is less than stop price then stop
         * direction is ABOVE otherwise is BELOW.
         * @example ABOVE
         */
        stop_direction?: "BELOW" | "ABOVE" | "RELATIVE_LAST_TRADE";
        /**
         * @description The base currency Account to use in the trade.
         * @example 12345
         */
        base_account_id?: number;
        /**
         * @description The counter currency Account to use in the trade.
         * @example 12345
         */
        counter_account_id?: number;
        /** @description Unix timestamp in milliseconds of when the request was created and sent. */
        timestamp?: number;
        /**
         * @description Specifies the number of milliseconds after timestamp the request is valid for.
         * If `timestamp` is not specified, `ttl` will not be used.
         * @example 5000
         */
        ttl?: number;
        /**
         * @description Client order ID.
         * May only contain alphanumeric (0-9, a-z, or A-Z) and special characters (_ ; , . -). Maximum length: 255.
         * It will be available in read endpoints, so you can use it to reconcile Luno with your internal system.
         * Values must be unique across all your successful order creation endpoint calls; trying to create an order
         * with the same `client_order_id` as one of your past orders will result in a HTTP 409 Conflict response.
         * @example lmt-53960812
         */
        client_order_id?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PostLimitOrderResponse"];
        };
      };
    };
  };
  /**
   * # Send
   * @description Send assets from an Account. Please note that the asset type sent must match the receive address of the same cryptocurrency of the same type - Bitcoin to Bitcoin, Ethereum to Ethereum, etc.
   *
   * Sends can be made to cryptocurrency receive addresses.
   *
   * <b>Note:</b> This is currently unavailable to users who are verified in countries with money travel rules.
   *
   * Permissions required: <code>Perm_W_Send</code>
   */
  send: {
    parameters: {
      query: {
        /**
         * @description Amount to send as a decimal string.
         * @example 1.5
         */
        amount: string;
        /**
         * @description Currency to send.
         * @example XBT
         */
        currency: string;
        /**
         * @description Destination address or email address.
         *
         * <b>Note</b>:
         * <ul>
         * <li>Ethereum addresses must be
         * <a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md" target="_blank" rel="nofollow">checksummed</a>.</li>
         * <li>Ethereum sends to email addresses are not supported.</li>
         * </ul>
         * @example 1AbbJJzevwFFVBKvZRtQHHFgrJyYTKaMw2
         */
        address: string;
        /**
         * @description User description for the transaction to record on the account statement.
         * @example My description
         */
        description?: string;
        /**
         * @description Message to send to the recipient.
         * This is only relevant when sending to an email address.
         * @example My message
         */
        message?: string;
        /**
         * @description Optional unique ID to associate with this withdrawal.
         * Useful to prevent duplicate sends in case of failure.
         * This supports all alphanumeric characters, as well as "-" and "_".
         * @example 123e4567-e89b-12d3-a456-426655440000
         */
        external_id?: string;
        /**
         * @description Optional boolean flag indicating that a XRP destination tag is provided (even if zero).
         * @example true
         */
        has_destination_tag?: boolean;
        /**
         * @description Optional XRP destination tag. Note that HasDestinationTag must be true if this value is provided.
         * @example 12345
         */
        destination_tag?: number;
        /**
         * @description Optional memo string used to provide account information for ATOM, etc. where it holds "account" information
         * for a generic address.
         * @example Test:TEST-test ?;lsbjaciuq12712837519*T*&$^572
         */
        memo?: string;
        /**
         * @description Only required for Foreign Exchange Notification under the Malaysia FEN rules. IsForexSend must be true if sending to an address hosted outside of Malaysia.
         * @example true
         */
        is_forex_send?: boolean;
        /**
         * @description Only required for Foreign Exchange Notification under the Malaysia FEN rules. IsDRB must be true if the user has Domestic Ringgit Borrowing (DRB).
         * @example true
         */
        is_drb?: boolean;
        /**
         * @description Only required for Foreign Exchange Notification under the Malaysia FEN rules. ForexNoticeSelfDeclaration must be true if the user has exceeded his/her annual investment limit in foreign currency assets.
         * @example true
         */
        forex_notice_self_declaration?: boolean;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["sendResponse"];
        };
      };
    };
  };
  /**
   * # Estimate send fees
   * @description Calculate fees involved with a crypto send request.
   *
   * Send address can be to a cryptocurrency receive address, or the email address of another Luno platform user.
   *
   * Permissions required: <code>MP_None</code>
   */
  SendFee: {
    parameters: {
      query: {
        /**
         * @description Amount to send as a decimal string.
         * @example 1.5
         */
        amount: string;
        /**
         * @description Currency to send.
         * @example XBT
         */
        currency: string;
        /**
         * @description Destination address or email address.
         *
         * <b>Note</b>:
         * <ul>
         * <li>Ethereum addresses must be
         * <a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md" target="_blank" rel="nofollow">checksummed</a>.</li>
         * <li>Ethereum sends to email addresses are not supported.</li>
         * </ul>
         * @example 1AbbJJzevwFFVBKvZRtQHHFgrJyYTKaMw2
         */
        address: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SendFeeResponse"];
        };
      };
    };
  };
  /**
   * # Cancel Order
   * @description Request to cancel an Order.
   *
   * <b>Note!</b>: Once an Order has been completed, it can not be reversed.
   * The return value from this request will indicate if the Stop request was successful or not.
   *
   * Permissions required: <code>Perm_W_Orders</code>
   */
  StopOrder: {
    parameters: {
      query: {
        /**
         * @description The Order identifier as a string.
         * @example BXMC2CJ7HNB88U4
         */
        order_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StopOrderResponse"];
        };
      };
    };
  };
  /**
   * # Get ticker for currency pair
   * @description Returns the latest ticker indicators for the specified currency pair.
   *
   * Please see the <a href="#tag/currency ">Currency list</a> for the complete list of supported currency pairs.
   */
  GetTicker: {
    parameters: {
      query: {
        /**
         * @description Currency pair
         * @example XBTZAR
         */
        pair: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GetTickerResponse"];
        };
      };
      default: components["responses"]["apiError"];
    };
  };
  /**
   * # List tickers for all currency pairs
   * @description Returns the latest ticker indicators from all active Luno exchanges.
   *
   * Please see the <a href="#tag/currency ">Currency list</a> for the complete list of supported currency pairs.
   */
  GetTickers: {
    parameters: {
      query?: {
        /**
         * @description Return tickers for multiple markets (if not provided, all tickers will be returned).
         * To request tickers for multiple markets, pass the parameter multiple times,
         * e.g. `pair=XBTZAR&pair=ETHZAR`.
         * @example XBTZAR
         */
        pair?: string[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListTickersResponse"];
        };
      };
      default: components["responses"]["apiError"];
    };
  };
  /**
   * # List recent trades
   * @description Returns a list of recent trades for the specified currency pair. At most
   * 100 trades are returned per call and never trades older than 24h. The
   * trades are sorted from newest to oldest.
   *
   * Please see the <a href="#tag/currency ">Currency list</a> for the complete list of supported currency pairs.
   */
  ListTrades: {
    parameters: {
      query: {
        /**
         * @description Currency pair of the market to list the trades from
         * @example XBTZAR
         */
        pair: string;
        /**
         * @description Fetch trades executed after this time, specified as a Unix timestamp in
         * milliseconds. An error will be returned if this is before 24h ago. Use
         * this parameter to either restrict to a shorter window or to iterate over
         * the trades in case you need more than the 100 most recent trades.
         * @example 1520438111000
         */
        since?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListTradesResponse"];
        };
      };
      default: components["responses"]["apiError"];
    };
  };
  /**
   * # List withdrawal requests
   * @description Returns a list of withdrawal requests.
   *
   * Permissions required: <code>Perm_R_Withdrawals</code>
   */
  ListWithdrawals: {
    parameters: {
      query?: {
        /**
         * @description Filter to withdrawals requested on or before the withdrawal with this ID.
         * Can be used for pagination.
         * @example 12345
         */
        before_id?: number;
        /**
         * @description Limit to this many withdrawals
         * @example 986
         */
        limit?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListWithdrawalsResponse"];
        };
      };
    };
  };
  /**
   * # Request a withdrawal
   * @description Creates a new withdrawal request to the specified beneficiary.
   *
   * Permissions required: <code>Perm_W_Withdrawals</code>
   */
  CreateWithdrawal: {
    parameters: {
      query: {
        /**
         * @description Withdrawal method.
         * @example ZAR_EFT
         */
        type: string;
        /**
         * @description Amount to withdraw. The currency withdrawn depends on the type setting.
         * @example 10000.00
         */
        amount: string;
        /**
         * @description The beneficiary ID of the bank account the withdrawal will be paid out to.
         * This parameter is required if the user has set up multiple beneficiaries.
         * The beneficiary ID can be found by selecting on the beneficiary name on the user’s <a href="/wallet/beneficiaries">Beneficiaries</a> page.
         * @example 12345
         */
        beneficiary_id?: number;
        /**
         * @description If true, it will be a fast withdrawal if possible. Fast withdrawals come with a fee.
         * Currently fast withdrawals are only available for `type=ZAR_EFT`; for other types, an error is returned.
         * Fast withdrawals are not possible for Bank of Baroda, Deutsche Bank, Merrill Lynch South Africa, UBS, Postbank and Tyme Bank.
         * The fee to be charged is the same as when withdrawing from the UI.
         * @example true
         */
        fast?: boolean;
        /**
         * @description For internal use.
         * Deprecated: We don't allow custom references and will remove this soon.
         */
        reference?: string;
        /**
         * @description Optional unique ID to associate with this withdrawal.
         * Useful to prevent duplicate sends.
         * This field supports all alphanumeric characters including "-" and "_".
         * @example 123e4567-e89b-12d3-a456-426655440000
         */
        external_id?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateWithdrawalResponse"];
        };
      };
    };
  };
  /**
   * # Get withdrawal request
   * @description Returns the status of a particular withdrawal request.
   *
   * Permissions required: <code>Perm_R_Withdrawals</code>
   */
  GetWithdrawal: {
    parameters: {
      path: {
        /**
         * @description Withdrawal ID to retrieve.
         * @example 12345
         */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GetWithdrawalResponse"];
        };
      };
    };
  };
  /**
   * # Cancel withdrawal request
   * @description Cancels a withdrawal request.
   * This can only be done if the request is still in state <code>PENDING</code>.
   *
   * Permissions required: <code>Perm_W_Withdrawals</code>
   */
  CancelWithdrawal: {
    parameters: {
      path: {
        /**
         * @description ID of the withdrawal to cancel.
         * @example 12345
         */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CancelWithdrawalResponse"];
        };
      };
    };
  };
  /**
   * # Get candles
   * @description Get candlestick market data from the specified time until now, from the oldest to the most recent.
   *
   * Permissions required: <code>MP_None</code>
   */
  GetCandles: {
    parameters: {
      query: {
        /**
         * @description Currency pair
         * @example XBTZAR
         */
        pair: string;
        /**
         * @description Filter to candles starting on or after this timestamp (Unix milliseconds).
         * Only up to 1000 of the earliest candles are returned.
         * @example 1470810728478
         */
        since: string;
        /**
         * @description Candle duration in seconds.
         * For example, 300 corresponds to 5m candles. Currently supported
         * durations are: 60 (1m), 300 (5m), 900 (15m), 1800 (30m), 3600 (1h),
         * 10800 (3h), 14400 (4h), 28800 (8h), 86400 (24h), 259200 (3d), 604800
         * (7d).
         * @example 300
         */
        duration: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GetCandlesResponse"];
        };
      };
      default: components["responses"]["apiError"];
    };
  };
  /**
   * # Get markets info
   * @description List all supported markets parameter information like price scale, min and
   * max order volumes and market ID.
   */
  Markets: {
    parameters: {
      query?: {
        /**
         * @description List of market pairs to return. Requesting only the required pairs will improve response times.
         * @example XBTZAR
         */
        pair?: string[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["MarketsInfoResponse"];
        };
      };
      default: components["responses"]["apiError"];
    };
  };
  /**
   * Move
   * @description Get a specific move funds instruction by either <code>id</code> or
   * <code>client_move_id</code>. If both are provided an API error will be
   * returned.
   *
   * Permissions required: <code>MP_None</code>
   */
  GetMove: {
    parameters: {
      query?: {
        /**
         * @description Get by the system ID. This is mutually exclusive with <code>client_move_id</code> and is required if
         * <code>client_move_id</code> is not provided.
         * @example 18563829047
         */
        id?: string;
        /**
         * @description Get by the user defined ID. This is mutually exclusive with <code>id</code> and is required if <code>id</code> is
         * not provided.
         * @example mv-53960812
         */
        client_move_id?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GetMoveResponse"];
        };
      };
      default: components["responses"]["apiError"];
    };
  };
  /**
   * Move
   * @description Move funds between two of your transactional accounts with the same currency
   * The funds may not be moved by the time the request returns. The GET method
   * can be used to poll for the move's status.
   *
   * Note: moves will show as transactions, but not as transfers.
   *
   * Permissions required: <code>MP_None_Write</code>
   */
  Move: {
    parameters: {
      query: {
        /**
         * @description Amount to transfer. Must be positive.
         * @example 10000.00
         */
        amount: string;
        /**
         * @description The account to debit the funds from.
         * @example 12345
         */
        debit_account_id: number;
        /**
         * @description The account to credit the funds to.
         * @example 12345
         */
        credit_account_id: number;
        /**
         * @description Client move ID.
         * May only contain alphanumeric (0-9, a-z, or A-Z) and special characters (_ ; , . -). Maximum length: 255.
         * It will be available in read endpoints, so you can use it to avoid duplicate moves between the same accounts.
         * Values must be unique across all your successful calls of this endpoint; trying to create a move request
         * with the same `client_move_id` as one of your past move requests will result in a HTTP 409 Conflict response.
         * @example mv-53960812
         */
        client_move_id?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["MoveResponse"];
        };
      };
      default: components["responses"]["apiError"];
    };
  };
  /**
   * ListMoves
   * @description Returns a list of the most recent moves ordered from newest to oldest.
   * This endpoint will list up to 100 most recent moves by default.
   *
   * Permissions required: <code>MP_None</code>
   */
  ListMoves: {
    parameters: {
      query?: {
        /**
         * @description Filter to moves requested before this timestamp (Unix milliseconds)
         * @example 1530865703508
         */
        before?: number;
        /**
         * @description Limit to this many moves
         * @example 986
         */
        limit?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListMovesResponse"];
        };
      };
      default: components["responses"]["apiError"];
    };
  };
  /**
   * List transfers
   * @description Returns a list of the most recent confirmed transfers ordered from newest to
   * oldest.
   * This includes bank transfers, card payments, or on-chain transactions that
   * have been reflected on your account available balance.
   *
   * Note that the Transfer `amount` is always a positive value and you should
   * use the `inbound` flag to determine the direction of the transfer.
   *
   * If you need to paginate the results you can set the `before` parameter to
   * the last returned transfer `created_at` field value and repeat the request
   * until you have all the transfers you need.
   * This endpoint will list up to 100 transfers at a time by default.
   *
   * Permissions required: <Code>Perm_R_Transfers</Code>
   */
  ListTransfers: {
    parameters: {
      query: {
        /** @description Unique identifier of the account to list the transfers from. */
        account_id: number;
        /**
         * @description Limit to this many transfers.
         * @example 986
         */
        limit?: number;
        /**
         * @description Filter to transfers created before this timestamp (Unix milliseconds).
         * The default value (0) will return the latest transfers on the account.
         * @example 1530865703508
         */
        before?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListTransfersResponse"];
        };
      };
      default: components["responses"]["apiError"];
    };
  };
  /**
   * List Orders v2
   * @description Returns a list of the most recently placed orders ordered from newest to
   * oldest. This endpoint will list up to 100 most recent open orders by
   * default.
   *
   * Permissions required: <Code>Perm_R_Orders</Code>
   */
  ListOrdersV2: {
    parameters: {
      query?: {
        /**
         * @description Filter to only orders of this currency pair.
         * @example XBTZAR
         */
        pair?: string;
        /**
         * @description If true, will return closed orders instead of open orders.
         * @example true
         */
        closed?: boolean;
        /**
         * @description Filter to orders created before this timestamp (Unix milliseconds)
         * @example 1530865703508
         */
        created_before?: number;
        /**
         * @description Limit to this many orders
         * @example 986
         */
        limit?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListOrders2Response"];
        };
      };
      default: components["responses"]["apiError"];
    };
  };
  /**
   * Get Order v2
   * @description Get the details for an order.
   *
   * Permissions required: <code>Perm_R_Orders</code>
   */
  GetOrderV2: {
    parameters: {
      path: {
        /**
         * @description Order reference
         * @example BXMC2CJ7HNB88U4
         */
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GetOrder2Response"];
        };
      };
      default: components["responses"]["apiError"];
    };
  };
  /**
   * Get Order v3
   * @description Get the details for an order by order reference or client order ID.
   * Exactly one of the two parameters must be provided, otherwise an error is returned.
   * Permissions required: <code>Perm_R_Orders</code>
   */
  GetOrderV3: {
    parameters: {
      query?: {
        /**
         * @description Order reference
         * @example BXMC2CJ7HNB88U4
         */
        id?: string;
        /**
         * @description Client Order ID has the value that was passed in when the Order was posted.
         * @example lmt-53960812
         */
        client_order_id?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GetOrder2Response"];
        };
      };
      default: components["responses"]["apiError"];
    };
  };
}
